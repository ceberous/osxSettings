#!/usr/bin/env python3
import os
import subprocess
import sys
import nacl.secret
import nacl.utils
import base64
from pathlib import Path
import tempfile
import random
import pyperclip
from slugify import slugify # pip install slugify
# pip install magic-wormhole # https://magic-wormhole.readthedocs.io/en/latest/welcome.html#library

# print( os.environ['PATH'] )

def run_bash_command( command ):
	try:
		# popen = subprocess.Popen( command , stdout=subprocess.PIPE , bufsize=1 , shell=True )
		popen = subprocess.Popen( command , stdout=subprocess.PIPE , shell=True )
		lines_iterator = iter( popen.stdout.readline , b"" )
		while popen.poll() is None:
			for line in lines_iterator:
				nline = line.rstrip()
				print( nline.decode( "latin" ) , end = "\r\n" , flush =True ) # yield line
		# print( command )
		# with Popen( command , stdout=PIPE , bufsize=1 , universal_newlines=True ) as p:
		# 	for line in p.stdout:
		# 		print( line , end="" ) # process line here
		# if p.returncode != 0:
		# 	raise CalledProcessError( p.returncode , p.args )
	except Exception as e:
		print( e )
		return False
# def run_bash_command( options ):
# 	try:
# 		# https://docs.python.org/3/library/subprocess.html
# 		result = subprocess.run( options , cwd=os.getcwd() , shell=False , capture_output=True , universal_newlines=True )
# 		if result.returncode != 0:
# 			return result.stderr
# 		else:
# 			return result.stdout
# 	except Exception as e:
# 		print( e )
# 		return False

def secret_box_gen_key():
	key = nacl.utils.random( nacl.secret.SecretBox.KEY_SIZE )
	key_b64 = base64.b64encode( key ).decode( "ascii" )
	# print( f"Human Readable Key \t=== {key_b64}" )
	return key_b64

def secret_box_seal( key , plain_text_message ):
	try:
		key_bytes = base64.b64decode( key )
		box = nacl.secret.SecretBox( key_bytes )
		encrypted = box.encrypt( bytes( plain_text_message , "ascii" ) )
		encrypted_b64 = base64.b64encode( encrypted ).decode( "ascii" )
		# print( f"Encrypted Message \t=== {encrypted_b64}" )
		return encrypted_b64
	except Exception as e:
		print( e )
		return False

def secret_box_open( key_b64 , encrypted_message ):
	try:
		key_bytes = base64.b64decode( key_b64 )
		encrypted_message_bytes = base64.b64decode( encrypted_message )
		box = nacl.secret.SecretBox( key_bytes )
		plaintext = box.decrypt( encrypted_message_bytes ).decode( "ascii" )
		# print( plaintext )
		return plaintext
	except Exception as e:
		print( e )
		return False

def get_file_as_base64_string( file_path ):
	try:
		with open( file_path , "rb" ) as f:
			base64_string = base64.b64encode( f.read() )
			result = base64_string.decode()
			return result
	except Exception as e:
		print( e )
		return False

def get_sealed_file_as_b64_message( key , file_path ):
	try:
		base64_string = get_file_as_base64_string( file_path )
		if base64_string == False:
			return False
		sealed = secret_box_seal( key , base64_string )
		if sealed == False:
			return False
		return sealed
	except Exception as e:
		print( e )
		return False

# wormhole receive 323-random-abc23
def worm_hole_get_code():
	prefix = "".join( [ str( random.randint( 1 , 10 ) ) for i in range( 0 , 2 ) ] )
	middle_word = "random"
	ending_word = "abc"
	suffix = "".join( [ str( random.randint( 1 , 10 ) ) for i in range( 0 , 2 ) ] )
	code = f"{prefix}-{middle_word}-{ending_word}{suffix}"
	return code


def worm_hole_send_sealed_file( key , file_path ):
	try:
		input_path = Path( file_path )
		#input_path_name = f"{input_path.stem}.{input_path.suffix}"
		input_path_name_safe = f"{slugify( input_path.stem )}{input_path.suffix}"
		message = get_sealed_file_as_b64_message( key , file_path )
		with tempfile.TemporaryDirectory() as temp_dir:
			temp_dir_posix = Path( temp_dir )
			with tempfile.NamedTemporaryFile( suffix=".asdf" , prefix=temp_dir , delete=False ) as tf:
				staging_file_path = temp_dir_posix.joinpath( tf.name )
				with open( str( staging_file_path ) , "w" , encoding="utf-8" ) as f:
					f.writelines( [ message ] )
				code = worm_hole_get_code()
				receive_command = f'wormholeRecieveWithSecretBox "{key}" "{input_path_name_safe}" "{code}"'
				print( receive_command )
				pyperclip.copy( receive_command )
				command = f'wormhole send --code="{code}" "{staging_file_path}"'
				run_bash_command( command )
	except Exception as e:
		print( e )
		return False

if __name__ == "__main__":
	if len( sys.argv ) < 3:
		key = secret_box_gen_key()
		file_path = sys.argv[ 1 ]
	else:
		key = sys.argv[ 1 ]
		file_path = sys.argv[ 2 ]
	worm_hole_send_sealed_file( key , file_path )






