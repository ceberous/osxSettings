#!/usr/bin/env python3
import os
import subprocess
import sys
import nacl.secret
import nacl.utils
import base64
from pathlib import Path
import tempfile
import random
import pyperclip
from datetime import datetime
# pip install magic-wormhole # https://magic-wormhole.readthedocs.io/en/latest/welcome.html#library

# print( os.environ['PATH'] )

def base64_encode( message ):
	try:
		message_bytes = message.encode( 'utf-8' )
		base64_bytes = base64.b64encode( message_bytes )
		base64_message = base64_bytes.decode( 'utf-8' )
		return base64_message
	except Exception as e:
		print( e )
		return False

def base64_decode( base64_message ):
	try:
		base64_bytes = base64_message.encode()
		message_bytes = base64.b64decode( base64_bytes )
		message = message_bytes.decode()
		return message
	except Exception as e:
		print( e )
		return False

def run_bash_command( command ):
	try:
		## good
		popen = subprocess.Popen( command , stdout=subprocess.PIPE , shell=True )
		lines_iterator = iter( popen.stdout.readline , b"" )
		while popen.poll() is None:
			for line in lines_iterator:
				nline = line.rstrip()
				print( nline.decode( "latin" ) , end = "\r\n" , flush = True ) # yield line


		# print( command )
		# with subprocess.Popen( command , stdout=subprocess.PIPE , universal_newlines=True ) as p:
		# 	for line in p.stdout:
		# 		print( line , end="" ) # process line here
		# if p.returncode != 0:
		# 	return False
	except Exception as e:
		print( e )
		return False


# def run_bash_command( options ):
# 	try:
# 		# https://docs.python.org/3/library/subprocess.html
# 		result = subprocess.run( options , cwd=os.getcwd() , shell=False , capture_output=True , universal_newlines=True )
# 		if result.returncode != 0:
# 			return result.stderr
# 		else:
# 			return result.stdout
# 	except Exception as e:
# 		print( e )
# 		return False

def secret_box_gen_key():
	key = nacl.utils.random( nacl.secret.SecretBox.KEY_SIZE )
	key_b64 = base64.b64encode( key ).decode( "ascii" )
	print( f"Human Readable Key \t=== {key_b64}" )

def secret_box_seal( key , plain_text_message ):
	try:
		key_bytes = base64.b64decode( key )
		box = nacl.secret.SecretBox( key_bytes )
		encrypted = box.encrypt( bytes( plain_text_message , "ascii" ) )
		encrypted_b64 = base64.b64encode( encrypted ).decode( "ascii" )
		# print( f"Encrypted Message \t=== {encrypted_b64}" )
		return encrypted_b64
	except Exception as e:
		print( e )
		return False

def secret_box_open( key_b64 , encrypted_message ):
	try:
		key_bytes = base64.b64decode( key_b64 )
		encrypted_message_bytes = base64.b64decode( encrypted_message )
		box = nacl.secret.SecretBox( key_bytes )
		plaintext = box.decrypt( encrypted_message_bytes ).decode( "ascii" )
		# print( plaintext )
		return plaintext
	except Exception as e:
		print( e )
		return False

def get_file_as_base64_string( file_path ):
	try:
		with open( file_path , "rb" ) as f:
			base64_string = base64.b64encode( f.read() )
			result = base64_string.decode()
			return result
	except Exception as e:
		print( e )
		return False

def get_sealed_file_as_b64_message( key , file_path ):
	try:
		base64_string = get_file_as_base64_string( file_path )
		if base64_string == False:
			return False
		sealed = secret_box_seal( key , base64_string )
		if sealed == False:
			return False
		return sealed
	except Exception as e:
		print( e )
		return False

# wormhole receive 323-random-abc23
def worm_hole_get_code():
	prefix = "".join( [ str( random.randint( 1 , 10 ) ) for i in range( 0 , 2 ) ] )
	middle_word = "random"
	ending_word = "abc"
	suffix = "".join( [ str( random.randint( 1 , 10 ) ) for i in range( 0 , 2 ) ] )
	code = f"{prefix}-{middle_word}-{ending_word}{suffix}"
	return code

def write_text( file_path , text_lines_list ):
	#with open( file_path , 'a', encoding='utf-8' ) as f:
	with open( file_path , 'w', encoding='utf-8' ) as f:
		f.writelines( text_lines_list )

def read_text( file_path ):
	with open( str( file_path ) ) as f:
		return f.read()

def worm_hole_receive_sealed_file( box_key , file_name , wormhole_code ):
	try:
		decryped_output_path = False
		file_name
		with tempfile.TemporaryDirectory() as temp_dir:
			temp_dir_posix = Path( temp_dir )
			sealed_file_path = temp_dir_posix.joinpath( "sealed.asdf" )
			command = f'wormhole receive "{wormhole_code}" --output-file "{str( sealed_file_path )}"'
			# run_bash_command( command )
			os.system( command )

			sealed_b64_string = read_text( sealed_file_path ).strip()
			opened = secret_box_open( box_key , sealed_b64_string )
			result = base64.b64decode( opened )
			output_path = Path.cwd().joinpath( file_name )
			print( str( output_path ) )
			with open( str( output_path ) , "wb" ) as f:
				f.write( result )
	except Exception as e:
		print( e )
		return False

if __name__ == "__main__":
	# secret_box_gen_key()
	worm_hole_receive_sealed_file( sys.argv[ 1 ] , sys.argv[ 2 ] , sys.argv[ 3 ] )
