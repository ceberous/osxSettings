#!/usr/bin/env python3
import sys
import requests
import json
import datetime as dt
# https://stackoverflow.com/a/470303
from dateutil import parser
import time
from datetime import datetime, tzinfo, timedelta
class simple_utc(tzinfo):
	def tzname(self,**kwargs):
		return "UTC"
	def utcoffset(self, dt):
		return timedelta(0)

#https://stackoverflow.com/a/47207182
def getDuration(then, now = datetime.now(), interval = "default"):

	# Returns a duration as specified by variable interval
	# Functions, except totalDuration, returns [quotient, remainder]

	duration = now - then # For build-in functions
	duration_in_s = duration.total_seconds()

	def years():
		return divmod(duration_in_s, 31536000) # Seconds in a year=31536000.

	def days(seconds = None):
		return divmod(seconds if seconds != None else duration_in_s, 86400) # Seconds in a day = 86400

	def hours(seconds = None):
		return divmod(seconds if seconds != None else duration_in_s, 3600) # Seconds in an hour = 3600

	def minutes(seconds = None):
		return divmod(seconds if seconds != None else duration_in_s, 60) # Seconds in a minute = 60

	def seconds(seconds = None):
		if seconds != None:
			return divmod(seconds, 1)
		return duration_in_s

	def totalDuration():
		y = years()
		d = days(y[1]) # Use remainder to calculate next variable
		h = hours(d[1])
		m = minutes(h[1])
		s = seconds(m[1])

		return "Created @ === {} years, {} days, {} hours, {} minutes and {} seconds ago".format(int(y[0]), int(d[0]), int(h[0]), int(m[0]), int(s[0]))

	return {
		'years': int(years()[0]),
		'days': int(days()[0]),
		'hours': int(hours()[0]),
		'minutes': int(minutes()[0]),
		'seconds': int(seconds()),
		'default': totalDuration()
	}[interval]

# How to Find Client ID , 31JAN2020
# 1.) Go to Someones Twitch Page
# 2.) Open Chrome Dev Tools , Network Tab
# 3.) Follow User
# 4.) POST Request for https://gql.twitch.tv/gql should be made
# Find "Client-Id:" in Request Headers
CLIENT_ID = "kimne78kx3ncx6brgo4mv6wki5h1ko"

# https://dev.twitch.tv/docs/v5/reference/users/#get-user-by-id
def getUserInfo( username ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	params = (
		( 'login' , username ) ,
	)
	response = requests.get( 'https://api.twitch.tv/kraken/users' , headers=headers , params=params )
	result = json.loads( response.text )
	return result

def getChannelInfo( user_id ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	response = requests.get( 'https://api.twitch.tv/kraken/channels/' + str( user_id ) , headers=headers )
	result = json.loads( response.text )
	return result


# https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100
def get_remaining_user_followers_batch( username , channel_id , offset ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	params = (
		( 'channel_id' , channel_id ) ,
		( 'limit' , 100 ) ,
		( 'offset' , offset )
	)
	url = 'https://api.twitch.tv/kraken/channels/' + channel_id + '/follows'
	response = requests.get( url , headers=headers , params=params )
	result = json.loads( response.text )
	usernames = []
	for i , user_info in enumerate( result[ "follows" ] ):
		usernames.append( user_info[ "user" ][ "name" ] )

	return usernames

def getUsersFollowers( channel_id ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	params = (
		( 'channel_id' , channel_id ) ,
		( 'limit' , 100 ) ,
	)
	url = 'https://api.twitch.tv/kraken/channels/' + channel_id + '/follows'
	response = requests.get( url , headers=headers , params=params )
	result = json.loads( response.text )
	usernames = []
	for i , user_info in enumerate( result[ "follows" ] ):
		usernames.append( user_info[ "user" ][ "name" ] )

	total_followers = int( result[ "_total" ] )
	batch_offset = 99
	total_retrieved = len( usernames )
	# I'm sorry for while loop
	while total_retrieved <= total_followers:
		remaining_followers_batch = get_remaining_user_followers_batch( sys.argv[ 1 ] , channel_id , batch_offset )
		if len( remaining_followers_batch ) <= 0:
			break
		#print( remaining_followers_batch )
		usernames = usernames + remaining_followers_batch
		total_retrieved = total_retrieved + len( remaining_followers_batch )
		#print( str( len( usernames ) ) + " of " + str( total_followers ) )
		batch_offset += 100

	unique = set( usernames )
	usernames = list( unique )
	return usernames


def get_remaining_followers_batch( username , user_id , offset ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	params = (
		( 'limit' , 100 ) ,
		( 'offset' , offset ) ,
	)
	url = 'https://api.twitch.tv/kraken/users/' + str( user_id ) + '/follows/channels'
	#print( params )
	#print( url )
	response = requests.get( url , headers=headers , params=params )
	result = json.loads( response.text )
	usernames = []
	for i , user_info in enumerate( result[ "follows" ] ):
		usernames.append( user_info[ "channel" ][ "name" ] )
	return usernames

# https://dev.twitch.tv/docs/v5/reference/users#get-user-follows
# Need to Increment through Batches of 100
def getUsersFollowing( username , user_id ):
	headers = {
		'Accept': 'application/vnd.twitchtv.v5+json' ,
		'Client-ID': CLIENT_ID ,
	}
	params = (
		( 'limit' , 100 ) ,
	)
	url = 'https://api.twitch.tv/kraken/users/' + str( user_id ) + '/follows/channels'
	response = requests.get( url , headers=headers , params=params )
	result = json.loads( response.text )
	usernames = []
	for i , user_info in enumerate( result[ "follows" ] ):
		usernames.append( user_info[ "channel" ][ "name" ] )
	total_followers = int( result[ "_total" ] )
	batch_offset = 99
	total_retrieved = len( usernames )
	# I'm sorry for while loop
	while total_retrieved <= total_followers:
		remaining_followers_batch = get_remaining_followers_batch( username , user_id , batch_offset )
		if len( remaining_followers_batch ) <= 0:
			break
		#print( remaining_followers_batch )
		usernames = usernames + remaining_followers_batch
		total_retrieved = total_retrieved + len( remaining_followers_batch )
		#print( str( len( usernames ) ) + " of " + str( total_followers ) )
		batch_offset += 100

	unique = set( usernames )
	usernames = list( unique )
	return usernames


if len( sys.argv ) < 2:
	sys.exit( 1 )

user = getUserInfo( sys.argv[ 1 ] )
channel = getChannelInfo( user[ "users" ][ 0 ][ "_id" ] )
followers = getUsersFollowers( user[ "users" ][ 0 ][ "_id" ] )
followers.sort()
following = getUsersFollowing( sys.argv[ 1 ] , user[ "users" ][ 0 ][ "_id" ] )
following.sort()

print( "Username === " + str( sys.argv[ 1 ] ) )
print( "https://twitch.tv/" + str( sys.argv[ 1 ] ) )
print( "User ID === " + str( user[ "users" ][ 0 ][ "_id" ] ) )
print( "Created @ === " + user[ "users" ][ 0 ][ "created_at" ] )
created_at_datetime_obj = parser.parse( user[ "users" ][ 0 ][ "created_at" ] )
created_at_datetime_obj = created_at_datetime_obj.replace(tzinfo=simple_utc())
now_datetime_obj = dt.datetime.utcnow().replace( tzinfo=simple_utc() )
time_since_created_string = getDuration( created_at_datetime_obj , now_datetime_obj , 'default' )
print( time_since_created_string )

# Profile Pictures and Stuff
print( user[ "users" ][ 0 ][ "logo" ] )
if channel[ "profile_banner" ] is not None:
	print( channel[ "profile_banner" ] )
if channel[ "video_banner" ] is not None:
	print( channel[ "video_banner" ] )

print( "\nFollowers === " + str( len( followers ) ) + " === " )
print( followers )
print( "\nFollowing === " + str( len( following ) ) + " ===" )
print( following )